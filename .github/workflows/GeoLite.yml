#
# https://github.com/P3TERX/GeoLite.mmdb
#
# File: .github/workflows/GeoLite.yml
# Description: Publish GeoLite.mmdb
#
# MIT License
#
# Copyright (c) 2021-2024 P3TERX <https://p3terx.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

name: Publish GeoLite.mmdb

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write
  actions: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for updates
      id: check_updates
      run: |
        databases=("GeoLite2-ASN" "GeoLite2-City" "GeoLite2-Country")
        need_update=false
        latest_db_time=0
        
        rfc_to_timestamp() {
          local rfc_time="$1"
          date -d "$rfc_time" +%s 2>/dev/null || echo "0"
        }
        
        last_release_time=0
        if git tag -l --sort=-version:refname | head -1 > /dev/null 2>&1; then
          last_tag=$(git tag -l --sort=-version:refname | head -1)
          echo "Last release tag: $last_tag"
          
          tag_date=$(git log -1 --format=%ai "$last_tag" 2>/dev/null)
          if [ -n "$tag_date" ]; then
            last_release_time=$(date -d "$tag_date" +%s 2>/dev/null || echo "0")
            echo "Tag date: $tag_date"
            echo "Tag timestamp: $last_release_time"
          else
            echo "Could not get tag date"
          fi
        else
          echo "No previous release found"
        fi
        
        echo "Checking for database updates..."
        echo "Last release timestamp: $last_release_time"
        
        if [ "$last_release_time" -eq 0 ]; then
          last_release_time=$(($(date +%s) - 86400))
          echo "Using 24 hours ago as reference: $last_release_time"
        fi
        
        for db in "${databases[@]}"; do
          echo "Checking $db..."
          
          response=$(curl -s -I -L -u "${{ secrets.MAXMIND_ACCOUNT_ID }}:${{ secrets.MAXMIND_LICENSE_KEY }}" \
            "https://download.maxmind.com/geoip/databases/${db}/download?suffix=tar.gz")
          
          if [ $? -ne 0 ]; then
            echo "Failed to check $db"
            continue
          fi
          
          last_modified=$(echo "$response" | grep -i "^last-modified:" | cut -d' ' -f2- | tr -d '\r\n' | sed 's/^ *//')
          echo "$db last modified: $last_modified"
          
          if [ -n "$last_modified" ]; then
            db_timestamp=$(rfc_to_timestamp "$last_modified")
            echo "$db timestamp: $db_timestamp"
            
            if [ "$db_timestamp" -eq 0 ]; then
              echo "Warning: Could not convert timestamp for $db"
              continue
            fi

            if [ "$db_timestamp" -gt "$latest_db_time" ]; then
              latest_db_time="$db_timestamp"
            fi
            
            buffer_time=60
            if [ "$db_timestamp" -gt $((last_release_time + buffer_time)) ]; then
              echo "$db has newer version (DB: $db_timestamp > Release: $last_release_time + buffer)"
              need_update=true
            else
              echo "$db is up to date (DB: $db_timestamp <= Release: $last_release_time)"
            fi
          else
            echo "Could not parse last-modified time for $db"
          fi
          
          echo "---"
        done
        
        echo "Final decision: need_update=$need_update"
        echo "Latest DB timestamp: $latest_db_time"
        echo "Last release timestamp: $last_release_time"
        
        if [ "$latest_db_time" -gt 0 ]; then
          echo "Latest DB time (human): $(date -d @$latest_db_time)"
        fi
        if [ "$last_release_time" -gt 0 ]; then
          echo "Last release time (human): $(date -d @$last_release_time)"
        fi

        echo "need_update=$need_update" >> $GITHUB_OUTPUT
        echo "current_date=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
        echo "latest_timestamp=$latest_db_time" >> $GITHUB_OUTPUT

    - name: Download GeoLite databases
      if: steps.check_updates.outputs.need_update == 'true'
      run: |
        echo "Updates detected, downloading databases..."
        echo "Latest database timestamp: ${{ steps.check_updates.outputs.latest_timestamp }}"

        curl -O -J -L -u "${{ secrets.MAXMIND_ACCOUNT_ID }}:${{ secrets.MAXMIND_LICENSE_KEY }}" \
          'https://download.maxmind.com/geoip/databases/GeoLite2-ASN/download?suffix=tar.gz'
        curl -O -J -L -u "${{ secrets.MAXMIND_ACCOUNT_ID }}:${{ secrets.MAXMIND_LICENSE_KEY }}" \
          'https://download.maxmind.com/geoip/databases/GeoLite2-City/download?suffix=tar.gz'
        curl -O -J -L -u "${{ secrets.MAXMIND_ACCOUNT_ID }}:${{ secrets.MAXMIND_LICENSE_KEY }}" \
          'https://download.maxmind.com/geoip/databases/GeoLite2-Country/download?suffix=tar.gz'
        
        for file in *.tar.gz; do
          if [ -f "$file" ]; then
            echo "Extracting $file"
            tar zxvf "$file"
          fi
        done
        
        mkdir -p upload
        if ls GeoLite*/*.mmdb 1> /dev/null 2>&1; then
          cp -v GeoLite*/*.mmdb upload/
          echo "Files prepared for upload:"
          ls -la upload/
        else
          echo "No .mmdb files found!"
          exit 1
        fi

    - name: Push to "download" branch
      if: steps.check_updates.outputs.need_update == 'true'
      run: |
        cd upload
        git init
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git checkout -b download
        git add .
        git commit -m "Update GeoLite databases - ${{ steps.check_updates.outputs.current_date }}"
        git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
        git push -f origin download

    - name: Upload to Releases
      if: steps.check_updates.outputs.need_update == 'true'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.check_updates.outputs.current_date }}
        name: "GeoLite2 Databases - ${{ steps.check_updates.outputs.current_date }}"
        body: |
          üìç **GeoLite2 Database Update**
          
          Updated on: ${{ steps.check_updates.outputs.current_date }}
          Database timestamp: ${{ steps.check_updates.outputs.latest_timestamp }}
          
          This release contains the latest GeoLite2 databases:
          - GeoLite2-ASN.mmdb
          - GeoLite2-City.mmdb  
          - GeoLite2-Country.mmdb
          
          Databases are automatically updated when MaxMind releases new versions.
        files: upload/*.mmdb

    - name: Remove old Releases
      if: steps.check_updates.outputs.need_update == 'true'
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete workflow runs
      if: steps.check_updates.outputs.need_update == 'true'
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: No updates needed
      if: steps.check_updates.outputs.need_update != 'true'
      run: |
        echo "‚úÖ No updates needed. Databases are up to date."
        echo "All database timestamps are older than or equal to the last release."